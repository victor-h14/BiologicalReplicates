enrichment_df = list()
for (con in list("VLBxVHB.HB.LB", "VHBxHB.LB", "HBxLB")) {
enrichment_df[[con]] = data.frame()
}
for (rep in list("SBC", "SBDG")) {
for (con in list("VLBxVHB.HB.LB", "VHBxHB.LB", "HBxLB")) {
genes = as.integer(rownames(y[[rep]]) %in% rownames(y[[rep]])[as.logical(DE[[paste(rep, con)]])])
names(genes) = rownames(y[[rep]])
pwf = nullp(genes, bias.data = length_weighted[[rep]], plot.fit = F)
go_table = goseq(pwf, gene2cat = sugarcane_GO)
go_table = go_table[which(!is.na(go_table[,6])),]
go_FDR = p.adjust(go_table$over_represented_pvalue, method = "BH")
enriched = go_FDR < 0.01
if (sum(enriched) != 0) {
enrichment_df[[con]] = rbind(
enrichment_df[[con]],
data.frame(Term = go_table$term[enriched],
Strategy = rep(rep, length(sum(enriched))),
Number = go_table$numDEInCat[enriched],
Ontology = go_table$ontology[enriched]))
}
}
}
enrichment_df
go_table
4
con = SBC
con = "SBC"
rep = "SBC"
con = "VLBxVHB.HB.LB"
genes = as.integer(rownames(y[[rep]]) %in% rownames(y[[rep]])[as.logical(DE[[paste(rep, con)]])])
names(genes) = rownames(y[[rep]])
pwf = nullp(genes, bias.data = length_weighted[[rep]], plot.fit = F)
pwf
go_table = goseq(pwf, gene2cat = sugarcane_GO)
which(!is.na(go_table[,6]))
go_table
go_table[which(!is.na(go_table[,6])),]
go_table
go_table[which(!is.na(go_table[,6])),]
go_table = go_table[which(!is.na(go_table[,6])),]
go_table = goseq(pwf, gene2cat = sugarcane_GO)
go_table
go_table[which(!is.na(go_table[,6])),]
go_table
go_table = go_table[which(!is.na(go_table[,6])),]
go_FDR = p.adjust(go_table$over_represented_pvalue, method = "BH")
enriched = go_FDR < 0.01
go_table$term[enriched]
rep(rep, length(sum(enriched)))
go_table$numDEInCat[enriched]
go_table$ontology[enriched])
go_table$ontology[enriched]
go_table$numDEInCat[enriched]
for (rep in list("SBC", "SBDG")) {
for (con in list("VLBxVHB.HB.LB", "VHBxHB.LB", "HBxLB")) {
genes = as.integer(rownames(y[[rep]]) %in% rownames(y[[rep]])[as.logical(DE[[paste(rep, con)]])])
names(genes) = rownames(y[[rep]])
pwf = nullp(genes, bias.data = length_weighted[[rep]], plot.fit = F)
go_table = goseq(pwf, gene2cat = sugarcane_GO)
go_table = go_table[which(!is.na(go_table[,6])),]
go_FDR = p.adjust(go_table$over_represented_pvalue, method = "BH")
enriched = go_FDR < 0.01
if (sum(enriched) != 0) {
enrichment_df[[con]] = rbind(
enrichment_df[[con]],
data.frame(Term = go_table$term[enriched],
Strategy = rep(rep, length(sum(enriched))),
Number = go_table$numDEInCat[enriched],
Ontology = go_table$ontology[enriched]))
}
}
}
package.version("GO.db")
package.version("GO.db")
library(GO.db)
package.version("GO.db")
library(tximport)
library(edgeR)
library(ggplot2)
library(goseq)
library(GO.db)
library(VennDiagram)
library(dplyr)
library(rlist)
library(GGally)
library(GO.db)
package.version("GO.db")
?library
?install.packages
.libPaths()
library(GO.db)
package.version("GO.db")
BiocManager::install("GO.db")
BiocManager::install("GO.db", force = T)
a = "backports, BH, brio, callr, cli, crayon, crosstalk, curl, desc, devtools, diffobj, DT, ellipsis, fansi, gh, git2r, highr, htmltools, htmlwidgets,
IRdisplay, IRkernel, jsonlite, knitr, later, lifecycle, magrittr, memoise, mime, openssl, pbdZMQ, pillar, pkgbuild, pkgload, processx, promises, ps,
Rcpp, remotes, repr, rlang, rprojroot, rstudioapi, rversions, stringi, testthat, tibble, usethis, utf8, vctrs, waldo, withr, xfun"
a
a = strsplit(a)
a = strsplit(a, split = ", ")
a
install.packages(a)
a = strsplit(a, split = ", ")
install.packages(a[[1]])
install.packages(a[[1]])
?I
go
# Funcional enrichment
enrichment_df = list()
go = data.frame(GO = c(), pvalue = c(), numDEInCat = c(), numInCat = c(), term = c(), contrast = c(), strategy = c())
for (con in list("VLBxVHB.HB.LB", "VHBxHB.LB", "HBxLB")) {
enrichment_df[[con]] = data.frame()
}
for (rep in list("SBC", "SBDG")) {
for (con in list("VLBxVHB.HB.LB", "VHBxHB.LB", "HBxLB")) {
genes = as.integer(rownames(y[[rep]]) %in% rownames(y[[rep]])[as.logical(DE[[paste(rep, con)]])])
names(genes) = rownames(y[[rep]])
pwf = nullp(genes, bias.data = length_weighted[[rep]], plot.fit = F)
go_table = goseq(pwf, gene2cat = sugarcane_GO)
go_table = go_table[which(!is.na(go_table[,6])),]
go_FDR = p.adjust(go_table$over_represented_pvalue, method = "BH")
go_table$FDR = go_FDR
go_table$contrast = con
go_table$strategy = rep
go_table = go_table[,-c(2,3,7)]
go = rbind(go, go_table)
enriched = go_FDR < 0.01
if (sum(enriched) != 0) {
enrichment_df[[con]] = rbind(
enrichment_df[[con]],
data.frame(Term = go_table$term[enriched],
Strategy = rep(rep, length(sum(enriched))),
Number = go_table$numDEInCat[enriched],
Ontology = go_table$ontology[enriched]))
}
}
}
library(tximport)
library(edgeR)
library(ggplot2)
library(goseq)
library(GO.db)
library(VennDiagram)
library(dplyr)
library(rlist)
library(GGally)
for (rep in list("SBC", "SBDG")) {
for (con in list("VLBxVHB.HB.LB", "VHBxHB.LB", "HBxLB")) {
genes = as.integer(rownames(y[[rep]]) %in% rownames(y[[rep]])[as.logical(DE[[paste(rep, con)]])])
names(genes) = rownames(y[[rep]])
pwf = nullp(genes, bias.data = length_weighted[[rep]], plot.fit = F)
go_table = goseq(pwf, gene2cat = sugarcane_GO)
go_table = go_table[which(!is.na(go_table[,6])),]
go_FDR = p.adjust(go_table$over_represented_pvalue, method = "BH")
go_table$FDR = go_FDR
go_table$contrast = con
go_table$strategy = rep
go_table = go_table[,-c(2,3,7)]
go = rbind(go, go_table)
enriched = go_FDR < 0.01
if (sum(enriched) != 0) {
enrichment_df[[con]] = rbind(
enrichment_df[[con]],
data.frame(Term = go_table$term[enriched],
Strategy = rep(rep, length(sum(enriched))),
Number = go_table$numDEInCat[enriched],
Ontology = go_table$ontology[enriched]))
}
}
}
# Funcional enrichment
enrichment_df = list()
go = data.frame(GO = c(), pvalue = c(), numDEInCat = c(), numInCat = c(), term = c(), contrast = c(), strategy = c())
for (con in list("VLBxVHB.HB.LB", "VHBxHB.LB", "HBxLB")) {
enrichment_df[[con]] = data.frame()
}
for (rep in list("SBC", "SBDG")) {
for (con in list("VLBxVHB.HB.LB", "VHBxHB.LB", "HBxLB")) {
genes = as.integer(rownames(y[[rep]]) %in% rownames(y[[rep]])[as.logical(DE[[paste(rep, con)]])])
names(genes) = rownames(y[[rep]])
pwf = nullp(genes, bias.data = length_weighted[[rep]], plot.fit = F)
go_table = goseq(pwf, gene2cat = sugarcane_GO)
go_table = go_table[which(!is.na(go_table[,6])),]
go_FDR = p.adjust(go_table$over_represented_pvalue, method = "BH")
enriched = go_FDR < 0.01
if (sum(enriched) != 0) {
enrichment_df[[con]] = rbind(
enrichment_df[[con]],
data.frame(Term = go_table$term[enriched],
Strategy = rep(rep, length(sum(enriched))),
Number = go_table$numDEInCat[enriched],
Ontology = go_table$ontology[enriched]))
}
go_table$FDR = go_FDR
go_table$contrast = con
go_table$strategy = rep
go_table = go_table[,-c(2,3,7)]
go = rbind(go, go_table)
}
}
go
write.csv(go, "FileS2.csv")
library(tidyverse)
library(edgeR)
library(scales)
library(reshape2)
library(GO.db)
library(goseq)
library(GGally)
load("sample_removal_dataframe.RData")
# plot A
plotA_df = reproduc_df %>%
filter(isDE | isNS) %>%
mutate(combinations = matchesDE + invertedDE + notsigDE + filteredDE + matchesNS + degNS + filteredNS) %>%
group_by(removed, strategy, isDE) %>%
summarise(Matches = mean(ifelse(isDE, matchesDE / combinations, matchesNS / combinations)),
Inverted = mean(ifelse(isDE, invertedDE / combinations, NA)),
NotSig = mean(ifelse(isDE, notsigDE / combinations, NA)),
Filtered = mean(ifelse(isDE, filteredDE / combinations, filteredNS / combinations)),
DEGs = mean(ifelse(isDE, NA, degNS / combinations))) %>%
melt(id.vars = 1:3) %>%
mutate(isDE = ifelse(isDE, "Originally DEG", "Originally NotSig")) %>%
mutate(variable_strategy = paste0(variable, " ", strategy))
plotA_aux = data.frame(removed = rep(0, 20),
value = rep(0, 20),
strategy = rep(c("SBC", "SBDG", "SBDG", "SBC"), 5),
isDE = rep(c("Originally DEG", "Originally NotSig"), 10),
variable = rep(c("Matches", "Inverted", "NotSig", "Filtered", "DEGs"), each = 4)) %>%
mutate(variable_strategy = paste0(variable, " ", strategy))
plotA_aux$value[which(plotA_aux$variable == "Matches")] = 1
plotA_df = rbind(plotA_aux, plotA_df)
plotA_df$variable = factor(plotA_df$variable, levels = c("Matches", "Inverted", "NotSig", "Filtered", "DEGs"))
ggplot(plotA_df) +
geom_line(aes(x = removed, y = value, color = variable, group = variable_strategy, linetype = strategy), na.rm = TRUE) +
scale_y_continuous(labels = percent_format(accuracy = 1)) +
labs(x = "Number of removed samples",
y = "Percentage of genes",
linetype = "Strategy",
color = "Variables") +
scale_color_manual(values = c("#d64a3b", "#e29d3e", "#80c34f", "#30acec", "#a666e1")) +
theme_Publication(base_family = "Helvetica") +
theme(legend.position = "right", legend.direction = "vertical") +
facet_wrap(~isDE)
# plot B
plotB_df = reproduc_df %>%
filter(isDE) %>%
mutate(combinations = matchesDE + invertedDE + notsigDE + filteredDE) %>%
group_by(matchesDE, strategy, removed, combinations) %>%
summarise(n = n()) %>%
mutate(n = ifelse(strategy == "SBC", n / n_deg[["SBC"]], n / n_deg[["SBDG"]]))
n_deg = list()
for (rep in list("SBC", "SBDG")) {
original_data = suppressWarnings(differential_expression(create_combinations(12, rep), rep))
n_deg[[rep]] = sum(abs(original_data) == 1)
}
differential_expression = function(selected_samples, strategy, complete = FALSE) {
new_experiment = experiment %>%
filter(replicate == strategy) %>%
filter(samples %in% selected_samples)
y = DGEList(counts = txi$counts[,which(colnames(txi$counts) %in% new_experiment$samples)],
group = new_experiment$brix)
keep = rowSums(cpm(y) > 1) >= 2
y = y[keep, , keep.lib.sizes = FALSE]
y = calcNormFactors(y, method = "TMM")
model = model.matrix(~ new_experiment$brix + 0, data = y$samples)
y = estimateDisp(y, model, robust = TRUE)
fit = glmFit(y, design = model)
VLBxVHB.HB.LB = makeContrasts(VLB - 1/3*(VHB + HB + LB), levels = factor(new_experiment$brix))
VHBxHB.LB = makeContrasts(VHB - 1/2*(HB + LB), levels = factor(new_experiment$brix))
HBxLB = makeContrasts(HB - LB, levels = factor(new_experiment$brix))
contrasts = list("VLBxVHB.HB.LB" = VLBxVHB.HB.LB, "VHBxHB.LB" = VHBxHB.LB, "HBxLB" = HBxLB)
result = c()
result2 = data.frame()
for (con in list("VLBxVHB.HB.LB", "VHBxHB.LB", "HBxLB")) {
de = rep(-2, nrow(txi$length))
lrt = glmLRT(fit, contrast = contrasts[[con]])
contrast_de = decideTestsDGE(lrt, adjust.method = "BH")
if (complete) {
lrt$table$de = contrast_de
table = as.data.frame(matrix(NA, nrow = nrow(txi$length), ncol = 5))
rownames(lrt$table) = c()
table[which(rownames(txi$length) %in% rownames(contrast_de)), ] = lrt$table
result2 = rbind(result2, table)
} else {
de[which(rownames(txi$length) %in% rownames(contrast_de))] = contrast_de
result = c(result, de)
}
}
if (complete) {
return(result2[2:nrow(result2),])
} else {
return(result)
}
}
create_combinations = function(number, strategy){
VLB = as.character(experiment$samples[which(experiment$brix == "VLB" & experiment$replicate == strategy)])
LB = as.character(experiment$samples[which(experiment$brix == "LB" & experiment$replicate == strategy)])
HB = as.character(experiment$samples[which(experiment$brix == "HB" & experiment$replicate == strategy)])
VHB = as.character(experiment$samples[which(experiment$brix == "VHB" & experiment$replicate == strategy)])
comb = expand.grid(2:3, 2:3, 2:3, 2:3)
comb = comb[which(rowSums(comb) == number),]
result = c()
for (i in 1:nrow(comb)) {
result = cbind(result, apply(expand.grid(
combn(VLB, comb[i, 1], simplify = FALSE),
combn(LB, comb[i, 2], simplify = FALSE),
combn(HB, comb[i, 3], simplify = FALSE),
combn(VHB, comb[i, 4], simplify = FALSE)
), 1, unlist))
}
return(t(result))
}
n_deg = list()
for (rep in list("SBC", "SBDG")) {
original_data = suppressWarnings(differential_expression(create_combinations(12, rep), rep))
n_deg[[rep]] = sum(abs(original_data) == 1)
}
# plot B
plotB_df = reproduc_df %>%
filter(isDE) %>%
mutate(combinations = matchesDE + invertedDE + notsigDE + filteredDE) %>%
group_by(matchesDE, strategy, removed, combinations) %>%
summarise(n = n()) %>%
mutate(n = ifelse(strategy == "SBC", n / n_deg[["SBC"]], n / n_deg[["SBDG"]]))
for (i in 1:4) {
for (rep in list("SBC", "SBDG")) {
plotB_df[sort(which(plotB_df$strategy == rep & plotB_df$removed == i),
decreasing = TRUE), 5] =
cumsum(plotB_df$n[sort(which(plotB_df$strategy == rep &plotB_df$removed == i),
decreasing = TRUE)])
}
plotB_df$removed[which(plotB_df$removed == i)] = paste0(i, " sample(s) removed")
}
ggplot(plotB_df) +
geom_line(aes(x = (combinations - matchesDE)/combinations, y = n, group = strategy, color = strategy)) +
scale_x_continuous(labels = percent_format(accuracy = 1), breaks = c(0.25, 0.5, 0.75, 1)) +
scale_y_continuous(labels = percent_format(accuracy = 1)) +
scale_color_manual(values = c("SBC" = "#50b9e1", "SBDG" = "#45b833")) +
labs(x = "Mismatches in the identification of DEGs",
y = "Cumulative percentage of original DEGs",
color = "Strategy") +
theme_Publication(base_family = "Helvetica") +
theme(aspect.ratio = 1) +
facet_wrap(~removed, ncol = 2)
plotB_df %>%
filter(matchesDE == combinations)
# plot C
plotC_df = reproduc_df %>%
filter(isDE) %>%
mutate(combinations = matchesDE + invertedDE + notsigDE + filteredDE) %>%
group_by(removed, strategy, contrast) %>%
summarise(Matches = mean(matchesDE / combinations),
Inverted = mean(invertedDE / combinations),
NotSig = mean(notsigDE / combinations),
Filtered = mean(filteredDE / combinations)) %>%
melt(id.vars = 1:3) %>%
mutate(variable_strategy = paste0(variable, " ", strategy))
plotC_df$contrast = factor(plotC_df$contrast, levels = c("VLBxVHB.HB.LB", "VHBxHB.LB", "HBxLB"))
ggplot(plotC_df) +
geom_line(aes(x = removed, y = value, color = variable, group = variable_strategy, linetype = strategy)) +
scale_y_continuous(labels = percent_format(accuracy = 1), breaks = pretty_breaks()) +
labs(x = "Number of removed samples",
y = "Percentage of genes",
linetype = "Strategy",
color = "Variables") +
scale_color_manual(values = c("#d64a3b", "#e29d3e", "#80c34f", "#30acec")) +
theme(aspect.ratio = 2) +
guides(color = guide_legend(order = 1)) +
facet_wrap(~contrast)
# plot D
sbc_de = reproduc_df %>%
filter(strategy == "SBC") %>%
mutate(sbc = matchesDE + invertedDE + degNS) %>%
filter(sbc > 0) %>%
group_by(gene, contrast, sbc, removed) %>%
summarise() %>%
ungroup()
sbdg_de = reproduc_df %>%
filter(strategy == "SBDG") %>%
mutate(sbdg = matchesDE + invertedDE + degNS) %>%
filter(sbdg > 0) %>%
group_by(gene, contrast, sbdg, removed) %>%
summarise() %>%
ungroup()
plotD_df = merge(sbc_de, sbdg_de, by = c("gene", "contrast", "removed")) %>%
group_by(sbc, sbdg, contrast, removed) %>%
summarise(n = n()) %>%
ungroup() %>%
mutate(sbc = as.integer(sbc), sbdg = as.integer(sbdg)) %>%
complete(sbc, sbdg, contrast, removed) %>%
mutate(n = replace_na(n, 0))
combinations = function(i) {nrow(create_combinations(12-i, "SBC"))}
for (i in 1:4) {
plotD_df$sbc[which(plotD_df$removed == i)] = plotD_df$sbc[which(plotD_df$removed == i)] / combinations(i)
plotD_df$sbdg[which(plotD_df$removed == i)] = plotD_df$sbdg[which(plotD_df$removed == i)] / combinations(i)
sbc_de$sbc[which(sbc_de$removed == i)] = sbc_de$sbc[which(sbc_de$removed == i)] / combinations(i)
sbdg_de$sbdg[which(sbdg_de$removed == i)] = sbdg_de$sbdg[which(sbdg_de$removed == i)] / combinations(i)
}
plotD_df$contrast = factor(plotD_df$contrast, levels = c("VLBxVHB.HB.LB", "VHBxHB.LB", "HBxLB"))
plotD_df$removed = paste0(plotD_df$removed, " sample(s) removed")
ggplot(plotD_df) +
geom_raster(aes(x = sbc, y = sbdg, fill = log10(n+1)), hjust = 0, vjust = 0) +
scale_fill_gradient(low = "#FBFBFB", high = "#E52839",
breaks = c(0, log10(11), log10(101), log10(1001)),
labels = c(1, 10, 100, 1000)) +
labs(fill = "Number of DEGs",
x = "Fraction of significant DE tests in SBC combinations",
y = "Fraction of significant DE tests in SBDG combinations") +
scale_x_continuous(labels = percent_format(accuracy = 1), limits = c(0, 1)) +
scale_y_continuous(labels = percent_format(accuracy = 1), limits = c(0, 1)) +
theme(panel.background = element_blank(),
legend.position = "bottom") +
facet_grid(removed ~ contrast, scales = "free")
# plot D2 - Functional enrichment
colnames(sbc_de)[3] = "n"
colnames(sbdg_de)[3] = "n"
sbc_de$strategy = "SBC"
sbdg_de$strategy = "SBDG"
gene_de = rbind(sbc_de, sbdg_de) %>%
group_by(gene, contrast, strategy) %>%
summarise(filter = sum(n > 0.95)) %>%
filter(filter == 4) %>%
dplyr::select(gene, contrast, strategy)
gene_keep = reproduc_df %>%
group_by(gene, strategy) %>%
summarise(n = sum(matchesDE, invertedDE, notsigDE, matchesNS, degNS)) %>%
filter(n > 0.05 * max(n)) %>%
dplyr::select(gene, strategy)
gene_keep$gene = as.character(gene_keep$gene)
conserved_df = list()
for (con in list("VLBxVHB.HB.LB", "VHBxHB.LB", "HBxLB")) {
conserved_df[[con]] = data.frame()
}
for (rep in list("SBC", "SBDG")) {
cols = which(colnames(txi$counts) %in% experiment$samples[which(experiment$replicate == rep)])
rows = which(rownames(txi$counts) %in% gene_keep$gene[gene_keep$strategy == rep])
gene_counts = txi$counts[rows, cols]
gene_lengths = rowSums(txi$length[rows, cols] * gene_counts / rowSums(gene_counts))
for (con in list("VLBxVHB.HB.LB", "VHBxHB.LB", "HBxLB")) {
genes = as.integer(names(gene_lengths) %in% gene_de$gene[which(gene_de$contrast == con & gene_de$strategy == rep)])
names(genes) = names(gene_lengths)
print(paste0(sum(gene_de$gene[which(gene_de$contrast == con & gene_de$strategy == rep)] %in% sugarcane_GO$gene), con, rep))
pwf = nullp(genes, bias.data = gene_lengths, plot.fit = F)
go_table = goseq(pwf, gene2cat = sugarcane_GO)
go_table = go_table[which(!is.na(go_table[,6])),]
go_FDR = p.adjust(go_table$over_represented_pvalue, method = "BH")
enriched = go_FDR < 0.01
if (sum(enriched) != 0) {
conserved_df[[con]] = rbind(
conserved_df[[con]],
data.frame(Term = go_table$term[enriched],
Strategy = rep(rep, length(sum(enriched))),
Number = go_table$numDEInCat[enriched],
Ontology = go_table$ontology[enriched]))
}
}
}
plot_d2 = list()
for (con in list("VLBxVHB.HB.LB", "VHBxHB.LB", "HBxLB")) {
plot_d2[[con]] = ggplot(conserved_df[[con]], aes(x = Term, y = Number, fill = Strategy)) +
geom_bar(stat = "identity", position = position_dodge2(preserve = "single"),
width = length(levels(conserved_df[[con]]$Strategy))/3) +
coord_flip() + ylab("Number of genes") + ylim(c(0, 600)) +
scale_fill_manual(values = c("SBC" = "#50b9e1", "SBDG" = "#45b833")) + xlab("") +
theme_Publication()
}
ggmatrix(plot_d2, 3, 1, yProportions = c(length(unique(conserved_df[[1]]$Term)),
length(unique(conserved_df[[2]]$Term)),
length(unique(conserved_df[[3]]$Term))),
yAxisLabels = c("VLBxVHB.HB.LB", "VHBxHB.LB", "HBxLB"),
legend = grab_legend(plot_d2[[1]])) + theme_Publication(base_family = "Helvetica")
conserved_df
go = data.frame(GO = c(), pvalue = c(), numDEInCat = c(), numInCat = c(), term = c(), contrast = c(), strategy = c())
conserved_df = list()
go = data.frame(GO = c(), pvalue = c(), numDEInCat = c(), numInCat = c(), term = c(), contrast = c(), strategy = c())
for (con in list("VLBxVHB.HB.LB", "VHBxHB.LB", "HBxLB")) {
conserved_df[[con]] = data.frame()
}
for (rep in list("SBC", "SBDG")) {
cols = which(colnames(txi$counts) %in% experiment$samples[which(experiment$replicate == rep)])
rows = which(rownames(txi$counts) %in% gene_keep$gene[gene_keep$strategy == rep])
gene_counts = txi$counts[rows, cols]
gene_lengths = rowSums(txi$length[rows, cols] * gene_counts / rowSums(gene_counts))
for (con in list("VLBxVHB.HB.LB", "VHBxHB.LB", "HBxLB")) {
genes = as.integer(names(gene_lengths) %in% gene_de$gene[which(gene_de$contrast == con & gene_de$strategy == rep)])
names(genes) = names(gene_lengths)
print(paste0(sum(gene_de$gene[which(gene_de$contrast == con & gene_de$strategy == rep)] %in% sugarcane_GO$gene), con, rep))
pwf = nullp(genes, bias.data = gene_lengths, plot.fit = F)
go_table = goseq(pwf, gene2cat = sugarcane_GO)
go_table = go_table[which(!is.na(go_table[,6])),]
go_FDR = p.adjust(go_table$over_represented_pvalue, method = "BH")
enriched = go_FDR < 0.01
if (sum(enriched) != 0) {
conserved_df[[con]] = rbind(
conserved_df[[con]],
data.frame(Term = go_table$term[enriched],
Strategy = rep(rep, length(sum(enriched))),
Number = go_table$numDEInCat[enriched],
Ontology = go_table$ontology[enriched]))
}
go_table$FDR = go_FDR
go_table$contrast = con
go_table$strategy = rep
go_table = go_table[,-c(2,3,7)]
go = rbind(go, go_table)
}
}
go
write.csv(go, "FileS3.csv")
warnings()
?goseq
