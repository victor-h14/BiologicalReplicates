c("RB92579","White Mauritius","F36-819","F36-819",
"RB835486","F36-819","Krakatau","SP80-3280",
"R570","Criolla Rayada","SP80-3280","SP80-3280",
"R570","IN84-58","IN84-58","R570",
"R570","IN84-58","IJ76-317","IN84-58",
"F36-819","SES205A","White Transparent","SP80-3280"),
levels = c("IN84-58","F36-819","R570","SP80-3280",
"Krakatau","Criolla Rayada","White Transparent","White Mauritius",
"SES205A","IJ76-317","RB92579","RB835486"))
brix = factor(
c("HB", "VHB", "LB","LB", "VHB", "LB","VLB", "VHB", "HB","LB", "VHB", "VHB",
"HB", "VLB", "VLB","HB", "HB", "VLB","LB", "VLB", "LB","VLB", "HB", "VHB"),
levels = c("VLB", "LB", "HB", "VHB"))
replicate = rep("SBC", 24)
replicate[which(nchar(folders) > 10)] = "SBDG"
replicate = factor(replicate)
brix_palette = c("dodgerblue", "limegreen", "goldenrod2", "brown1")
experiment = data.frame(samples = folders, genotypes = genotypes, brix = brix, replicate = replicate)
differential_expression = function(selected_samples, strategy, complete = FALSE) {
new_experiment = experiment %>%
filter(replicate == strategy) %>%
filter(samples %in% selected_samples)
y = DGEList(counts = txi$counts[,which(colnames(txi$counts) %in% new_experiment$samples)],
group = new_experiment$brix)
keep = rowSums(cpm(y) > 1) >= 2
y = y[keep, , keep.lib.sizes = FALSE]
y = calcNormFactors(y, method = "TMM")
model = model.matrix(~ new_experiment$brix + 0, data = y$samples)
y = estimateDisp(y, model, robust = TRUE)
fit = glmFit(y, design = model)
VLBxVHB.HB.LB = makeContrasts(VLB - 1/3*(VHB + HB + LB), levels = factor(new_experiment$brix))
VHBxHB.LB = makeContrasts(VHB - 1/2*(HB + LB), levels = factor(new_experiment$brix))
HBxLB = makeContrasts(HB - LB, levels = factor(new_experiment$brix))
contrasts = list("VLBxVHB.HB.LB" = VLBxVHB.HB.LB, "VHBxHB.LB" = VHBxHB.LB, "HBxLB" = HBxLB)
result = c()
result2 = data.frame()
for (con in list("VLBxVHB.HB.LB", "VHBxHB.LB", "HBxLB")) {
de = rep(-2, nrow(txi$length))
lrt = glmLRT(fit, contrast = contrasts[[con]])
contrast_de = decideTestsDGE(lrt, adjust.method = "BH")
if (complete) {
lrt$table$de = contrast_de
table = as.data.frame(matrix(NA, nrow = nrow(txi$length), ncol = 5))
rownames(lrt$table) = c()
table[which(rownames(txi$length) %in% rownames(contrast_de)), ] = lrt$table
result2 = rbind(result2, table)
} else {
de[which(rownames(txi$length) %in% rownames(contrast_de))] = contrast_de
result = c(result, de)
}
}
if (complete) {
return(result2[2:nrow(result2),])
} else {
return(result)
}
}
create_combinations = function(number, strategy){
VLB = as.character(experiment$samples[which(experiment$brix == "VLB" & experiment$replicate == strategy)])
LB = as.character(experiment$samples[which(experiment$brix == "LB" & experiment$replicate == strategy)])
HB = as.character(experiment$samples[which(experiment$brix == "HB" & experiment$replicate == strategy)])
VHB = as.character(experiment$samples[which(experiment$brix == "VHB" & experiment$replicate == strategy)])
comb = expand.grid(2:3, 2:3, 2:3, 2:3)
comb = comb[which(rowSums(comb) == number),]
result = c()
for (i in 1:nrow(comb)) {
result = cbind(result, apply(expand.grid(
combn(VLB, comb[i, 1], simplify = FALSE),
combn(LB, comb[i, 2], simplify = FALSE),
combn(HB, comb[i, 3], simplify = FALSE),
combn(VHB, comb[i, 4], simplify = FALSE)
), 1, unlist))
}
return(t(result))
}
n = nrow(txi$counts)
for (rep in list("SBC", "SBDG")) {
original_data = suppressWarnings(differential_expression(create_combinations(12, rep), rep))
n_deg[[rep]] = sum(abs(original_data) == 1)
}
n_deg
n_deg = list()
for (rep in list("SBC", "SBDG")) {
original_data = suppressWarnings(differential_expression(create_combinations(12, rep), rep))
n_deg[[rep]] = sum(abs(original_data) == 1)
}
# plot A
plotA_df = reproduc_df %>%
filter(isDE | isNS) %>%
mutate(combinations = matchesDE + invertedDE + notsigDE + filteredDE + matchesNS + degNS + filteredNS) %>%
group_by(removed, strategy, isDE) %>%
summarise(Matches = mean(ifelse(isDE, matchesDE / combinations, matchesNS / combinations)),
Inverted = mean(ifelse(isDE, invertedDE / combinations, NA)),
NotSig = mean(ifelse(isDE, notsigDE / combinations, NA)),
Filtered = mean(ifelse(isDE, filteredDE / combinations, filteredNS / combinations)),
DEGs = mean(ifelse(isDE, NA, degNS / combinations))) %>%
melt(id.vars = 1:3) %>%
mutate(isDE = ifelse(isDE, "Originally DEG", "Originally NotSig")) %>%
mutate(variable_strategy = paste0(variable, " ", strategy))
plotA_aux = data.frame(removed = rep(0, 20),
value = rep(0, 20),
strategy = rep(c("SBC", "SBDG", "SBDG", "SBC"), 5),
isDE = rep(c("Originally DEG", "Originally NotSig"), 10),
variable = rep(c("Matches", "Inverted", "NotSig", "Filtered", "DEGs"), each = 4)) %>%
mutate(variable_strategy = paste0(variable, " ", strategy))
plotA_aux$value[which(plotA_aux$variable == "Matches")] = 1
plotA_df = rbind(plotA_aux, plotA_df)
plotA_df$variable = factor(plotA_df$variable, levels = c("Matches", "Inverted", "NotSig", "Filtered", "DEGs"))
ggplot(plotA_df) +
geom_line(aes(x = removed, y = value, color = variable, group = variable_strategy, linetype = strategy), na.rm = TRUE) +
scale_y_continuous(labels = percent_format(accuracy = 1)) +
labs(x = "Number of removed samples",
y = "Percentage of genes",
linetype = "Strategy",
color = "Variables") +
scale_color_manual(values = c("#d64a3b", "#e29d3e", "#80c34f", "#30acec", "#a666e1")) +
theme_Publication(base_family = "Helvetica") +
theme(legend.position = "right", legend.direction = "vertical") +
facet_wrap(~isDE)
# plot D
sbc_de = reproduc_df %>%
filter(strategy == "SBC") %>%
mutate(sbc = matchesDE + invertedDE + degNS) %>%
filter(sbc > 0) %>%
group_by(gene, contrast, sbc, removed) %>%
summarise() %>%
ungroup()
sbdg_de = reproduc_df %>%
filter(strategy == "SBDG") %>%
mutate(sbdg = matchesDE + invertedDE + degNS) %>%
filter(sbdg > 0) %>%
group_by(gene, contrast, sbdg, removed) %>%
summarise() %>%
ungroup()
plotD_df = merge(sbc_de, sbdg_de, by = c("gene", "contrast", "removed")) %>%
group_by(sbc, sbdg, contrast, removed) %>%
summarise(n = n()) %>%
ungroup() %>%
mutate(sbc = as.integer(sbc), sbdg = as.integer(sbdg)) %>%
complete(sbc, sbdg, contrast, removed) %>%
mutate(n = replace_na(n, 0))
combinations = function(i) {nrow(create_combinations(12-i, "SBC"))}
for (i in 1:4) {
plotD_df$sbc[which(plotD_df$removed == i)] = plotD_df$sbc[which(plotD_df$removed == i)] / combinations(i)
plotD_df$sbdg[which(plotD_df$removed == i)] = plotD_df$sbdg[which(plotD_df$removed == i)] / combinations(i)
sbc_de$sbc[which(sbc_de$removed == i)] = sbc_de$sbc[which(sbc_de$removed == i)] / combinations(i)
sbdg_de$sbdg[which(sbdg_de$removed == i)] = sbdg_de$sbdg[which(sbdg_de$removed == i)] / combinations(i)
}
plotD_df$contrast = factor(plotD_df$contrast, levels = c("VLBxVHB.HB.LB", "VHBxHB.LB", "HBxLB"))
plotD_df$removed = paste0(plotD_df$removed, " sample(s) removed")
ggplot(plotD_df) +
geom_raster(aes(x = sbc, y = sbdg, fill = log10(n+1)), hjust = 0, vjust = 0) +
scale_fill_gradient(low = "#FBFBFB", high = "#E52839",
breaks = c(0, log10(11), log10(101), log10(1001)),
labels = c(1, 10, 100, 1000)) +
labs(fill = "Number of DEGs",
x = "Fraction of significant DE tests in SBC combinations",
y = "Fraction of significant DE tests in SBDG combinations") +
scale_x_continuous(labels = percent_format(accuracy = 1), limits = c(0, 1)) +
scale_y_continuous(labels = percent_format(accuracy = 1), limits = c(0, 1)) +
theme(panel.background = element_blank(),
legend.position = "bottom") +
facet_grid(removed ~ contrast, scales = "free")
# plot D2 - Functional enrichment
colnames(sbc_de)[3] = "n"
colnames(sbdg_de)[3] = "n"
sbc_de$strategy = "SBC"
sbdg_de$strategy = "SBDG"
gene_de = rbind(sbc_de, sbdg_de) %>%
group_by(gene, contrast, strategy) %>%
summarise(filter = sum(n > 0.95)) %>%
filter(filter == 4) %>%
dplyr::select(gene, contrast, strategy)
gene_de
gene_de
gene_de
rbind(sbc_de, sbdg_de)
rbind(sbc_de, sbdg_de) %>%
group_by(gene, contrast, strategy)
rbind(sbc_de, sbdg_de) %>%
group_by(gene, contrast, strategy) %>%
summarise(filter = sum(n > 0.95))
rbind(sbc_de, sbdg_de) %>%
group_by(gene, contrast, strategy) %>%
summarise(filter = sum(n > 0.95)) %>%
filter(filter == 4)
rbind(sbc_de, sbdg_de) %>%
group_by(gene, contrast, strategy) %>%
summarise(filter = sum(n > 0.95)) %>%
filter(filter == 4) %>%
dplyr::select(gene, contrast, strategy)
gene_de = rbind(sbc_de, sbdg_de) %>%
group_by(gene, contrast, strategy) %>%
summarise(filter = sum(n > 0.95)) %>%
filter(filter == 4) %>%
dplyr::select(gene, contrast, strategy)
gene_keep = reproduc_df %>%
group_by(gene, strategy) %>%
summarise(n = sum(matchesDE, invertedDE, notsigDE, matchesNS, degNS)) %>%
filter(n > 0.05 * max(n)) %>%
dplyr::select(gene, strategy)
gene_keep = reproduc_df %>%
group_by(gene, strategy) %>%
summarise(n = sum(matchesDE, invertedDE, notsigDE, matchesNS, degNS)) %>%
filter(n > 0.05 * max(n)) %>%
dplyr::select(gene, strategy)
gene_keep$gene = as.character(gene_keep$gene)
conserved_df = list()
for (con in list("VLBxVHB.HB.LB", "VHBxHB.LB", "HBxLB")) {
conserved_df[[con]] = data.frame()
}
for (rep in list("SBC", "SBDG")) {
cols = which(colnames(txi$counts) %in% experiment$samples[which(experiment$replicate == rep)])
rows = which(rownames(txi$counts) %in% gene_keep$gene[gene_keep$strategy == rep])
gene_counts = txi$counts[rows, cols]
gene_lengths = rowSums(txi$length[rows, cols] * gene_counts / rowSums(gene_counts))
for (con in list("VLBxVHB.HB.LB", "VHBxHB.LB", "HBxLB")) {
genes = as.integer(names(gene_lengths) %in% gene_de$gene[which(gene_de$contrast == con & gene_de$strategy == rep)])
names(genes) = names(gene_lengths)
print(paste0(sum(gene_de$gene[which(gene_de$contrast == con & gene_de$strategy == rep)] %in% sugarcane_GO$gene), con, rep))
pwf = nullp(genes, bias.data = gene_lengths, plot.fit = F)
go_table = goseq(pwf, gene2cat = sugarcane_GO)
go_table = go_table[which(!is.na(go_table[,6])),]
go_FDR = p.adjust(go_table$over_represented_pvalue, method = "BH")
enriched = go_FDR < 0.01
if (sum(enriched) != 0) {
conserved_df[[con]] = rbind(
conserved_df[[con]],
data.frame(Term = go_table$term[enriched],
Strategy = rep(rep, length(sum(enriched))),
Number = go_table$numDEInCat[enriched],
Ontology = go_table$ontology[enriched]))
}
}
}
plot_d2 = list()
for (con in list("VLBxVHB.HB.LB", "VHBxHB.LB", "HBxLB")) {
plot_d2[[con]] = ggplot(conserved_df[[con]], aes(x = Term, y = Number, fill = Strategy)) +
geom_bar(stat = "identity", position = position_dodge2(preserve = "single"),
width = length(levels(conserved_df[[con]]$Strategy))/3) +
coord_flip() + ylab("Number of genes") + ylim(c(0, 600)) +
scale_fill_manual(values = c("SBC" = "#50b9e1", "SBDG" = "#45b833")) + xlab("") +
theme_Publication()
}
ggmatrix(plot_d2, 3, 1, yProportions = c(length(unique(conserved_df[[1]]$Term)),
length(unique(conserved_df[[2]]$Term)),
length(unique(conserved_df[[3]]$Term))),
yAxisLabels = c("VLBxVHB.HB.LB", "VHBxHB.LB", "HBxLB"),
legend = grab_legend(plot_d2[[1]])) + theme_Publication(base_family = "Helvetica")
# plot E
sbc_de = reproduc_df %>%
filter(strategy == "SBC") %>%
mutate(sbc = matchesDE + invertedDE + degNS) %>%
group_by(gene, contrast, removed) %>%
summarise(sbc = sbc > 0)
sbc_de
sbc_de = reproduc_df %>%
filter(strategy == "SBC") %>%
mutate(sbc = matchesDE + invertedDE + degNS) %>%
group_by(gene, contrast, removed) %>%
summarise(sbc = sbc > 0)
sbdg_de = reproduc_df %>%
filter(strategy == "SBDG") %>%
mutate(sbdg = matchesDE + invertedDE + degNS) %>%
group_by(gene, contrast, removed) %>%
summarise(sbdg = sbdg > 0)
plotE_df = merge(sbc_de, sbdg_de, by = c("gene", "contrast", "removed")) %>%
filter(sbc | sbdg) %>%
group_by(sbc, sbdg, contrast, removed) %>%
summarise(n = n()) %>%
mutate(common = sbc + 2 * sbdg)
plotE_df$common = factor(plotE_df$common, labels = c("SBC only", "SBDG only", "Common"))
ggplot(plotE_df) +
geom_bar(aes(x = removed, y = n, group = common, fill = common), stat = "identity", position = "dodge") +
geom_text(aes(label = n, x = removed + (as.numeric(common)-1)*0.3, y = n), vjust = 4.5, hjust = 1.2 , size = 3) +
scale_y_continuous(trans = "log10", labels = trans_format("log10", math_format(10^.x))) +
coord_flip() +
labs(fill = "DEGs groupment",
y = "Number of DEGs",
x = "Number of removed samples") +
scale_fill_manual(values = c("SBC only" = "#50b9e1", "SBDG only" = "#45b833", "Common" = "#e25575")) +
theme(aspect.ratio = 3) +
facet_wrap(~contrast)
ggplot(plotE_df) +
geom_bar(aes(x = removed, y = n, group = common, fill = common), stat = "identity", position = "dodge") +
geom_text(aes(label = n, x = removed + (as.numeric(common)-1)*0.3, y = n), vjust = 4.5, hjust = 1.2 , size = 3) +
scale_y_continuous(trans = "log10", labels = trans_format("log10", math_format(10^.x))) +
coord_flip() +
labs(fill = "DEGs groupment",
y = "Number of DEGs",
x = "Number of removed samples") +
scale_fill_manual(values = c("SBC only" = "#50b9e1", "SBDG only" = "#45b833", "Common" = "#e25575")) +
theme_Publication() +
theme(aspect.ratio = 3) +
facet_wrap(~contrast)
################################################################################################
#                                                                                              #
#                       Comparing only the different genotypes                                 #
#                                                                                              #
################################################################################################
library(VennDiagram)
library(grid)
library(GGally)
venn_triple = function(group1, group2, group3, labels, colors, two_layers = TRUE){
grid.newpage()
group1 = replace_na(group1, -2)
group2 = replace_na(group2, -2)
group3 = replace_na(group3, -2)
draw.triple.venn(
area1 = sum(abs(group1) == 1),
area2 = sum(abs(group2) == 1),
area3 = sum(abs(group3) == 1),
n12 = sum(group1 == group2 & abs(group1) == 1),
n13 = sum(group3 == group1 & abs(group3) == 1),
n23 = sum(group2 == group3 & abs(group2) == 1),
n123 = sum(group1 == group2 & group1 == group3 & abs(group1) == 1),
category = labels,
fill = colors,
cex = rep(0.8, 7))
if (two_layers) {
draw.triple.venn(
area1 = sum(abs(group1) == 1),
area2 = sum(abs(group2) == 1),
area3 = sum(abs(group3) == 1),
n12 = sum(group1 == group2 & abs(group1) == 1),
n13 = sum(group3 == group1 & abs(group3) == 1),
n23 = sum(group2 == group3 & abs(group2) == 1),
n123 = sum(group1 == group2 & group1 == group3 & abs(group1) == 1),
category = labels,
cex = rep(0.8, 7))
}
}
exclusive_samples = c("6B_S21_L003_R1", "17B_S23_L003_R1", "1A_S16_L003_R1", "2B_S20_L003_R1",
"10A_S18_L003_R1", "7A_S17_L003_R1",  "13A_S19_L003_R1", "16B_S22_L003_R1")
exclusive = suppressWarnings(differential_expression(exclusive_samples, "SBDG", TRUE))
sbdg = suppressWarnings(differential_expression(create_combinations(12, "SBDG"), "SBDG", TRUE))
sbc = suppressWarnings(differential_expression(create_combinations(12, "SBC"), "SBC", TRUE))
labels = c("", "", "")
colors = c("#50b9e1", "#45b833", "#ffa500")
for (i in 1:3) {
pdf(paste0(i,".pdf"), width = 2, height = 2)
venn_triple(sbc$V5[((i-1)*n):(i*n)],
sbdg$V5[((i-1)*n):(i*n)],
exclusive$V5[((i-1)*n):(i*n)],
labels,
colors)
dev.off()
}
labels = c("SBC", "SBDG", "Exclusive")
na_index = which(!is.na(exclusive[,1]) & !is.na(sbdg[,1]) & !is.na(sbc[,1]) & 1:nrow(sbc) < n)
length(na_index)
exclusive = exclusive[na_index,]
sbdg = sbdg[na_index,]
sbc = sbc[na_index,]
plot_list = list()
rep = list(sbc, sbdg, exclusive)
for (i in 1:3) {
hist_plot = hist(rep[[i]]$V1[which(abs(rep[[i]]$V5) == 1)], breaks = 20, plot = FALSE)
hist_df = data.frame(x = hist_plot$mids, y = hist_plot$counts, de = "DEGs")
hist_plot = hist(rep[[i]]$V1[which(rep[[i]]$V5 == 0)], breaks = hist_plot$breaks, plot = FALSE)
hist_df = rbind(hist_df, data.frame(x = hist_plot$mids, y = hist_plot$counts, de = "NotSig"))
hist_plot = ggplot(hist_df) +
geom_bar(aes(x = x, y = y, fill = de), stat = "identity") +
scale_fill_manual(values = c(colors[i], "#707070")) +
scale_x_continuous(breaks = c(-10, 0, 10), limits = c(-14, 14)) +
scale_y_continuous(limits = c(0, 14000))
plot_list[[i*4-3]] = hist_plot
}
for (i in 1:2) {
for (j in (i+1):3) {
logfc_df = data.frame(x = rep[[i]]$V1, y = rep[[j]]$V1)
logfc_df$de = "NotSig"
logfc_df$de[which(abs(rep[[i]]$V5) == 1)] = labels[i]
logfc_df$de[which(abs(rep[[j]]$V5) == 1)] = labels[j]
logfc_df$de[which(abs(rep[[i]]$V5) == 1 & abs(rep[[j]]$V5) == 1)] = "Common"
logfc_plot = ggplot(logfc_df) +
geom_point(aes(x = x, y = y, color = de), size = 0.2, alpha = 0.25) +
labs(x = labels[i], y = labels[j]) +
scale_x_continuous(breaks = c(-10, 0, 10), limits = c(-14, 14)) +
scale_y_continuous(breaks = c(-10, 0, 10), limits = c(-14, 14)) +
scale_color_manual(values = c("SBC" = colors[1],
"SBDG" = colors[2],
"Exclusive" = colors[3],
"Common" = "#e25575",
"NotSig" = "#707070"))
plot_list[[i+j*3-3]] = logfc_plot
correlation = round(cor(rep[[i]]$V1, rep[[j]]$V1), digits = 4)
text = paste0("Corr: ", correlation, "\nGenotypes in common: ", 8*i -4*j + 4)
plot_list[[i*3+j-3]] = ggally_text(text) +
theme_grey() + theme(panel.grid = element_blank())
}
}
DEGs_factor = factor(c("SBC", "SBDG", "Exclusive", "Common", "NotSig"),
levels = c("SBC", "SBDG", "Exclusive", "Common", "NotSig"))
legend = ggplot(data.frame(x = 1:5, y = 1:5, DEGs = DEGs_factor)) +
geom_bar(aes(x = x, y = y, fill = DEGs), stat = "identity") +
scale_fill_manual(values = c("SBC" = colors[1],
"SBDG" = colors[2],
"Exclusive" = colors[3],
"Common" = "#e25575",
"NotSig" = "#707070"))
ggmatrix(plot_list, 3, 3, labels, labels, legend = grab_legend(legend), xlab = "log(FC)")
ggmatrix(plot_list, 3, 3, labels, labels, legend = grab_legend(legend), xlab = "log(FC)") +
theme_Publication(base_family = "Helvetica")
legend = ggplot(data.frame(x = 1:5, y = 1:5, DEGs = DEGs_factor)) +
geom_bar(aes(x = x, y = y, fill = DEGs), stat = "identity") +
scale_fill_manual(values = c("SBC" = colors[1],
"SBDG" = colors[2],
"Exclusive" = colors[3],
"Common" = "#e25575",
"NotSig" = "#707070")) + theme_Publication(base_family = "Helvetica")
ggmatrix(plot_list, 3, 3, labels, labels, legend = grab_legend(legend), xlab = "log(FC)") +
theme_Publication(base_family = "Helvetica")
ggmatrix(plot_list, 3, 3, labels, labels, legend = grab_legend(legend), xlab = "log(FC)") +
theme(panel.grid.major = element_blank()) +
theme_Publication(base_family = "Helvetica")
ggmatrix(plot_list, 3, 3, labels, labels, legend = grab_legend(legend), xlab = "log(FC)") +
theme_Publication(base_family = "Helvetica") +
theme(panel.grid.major = element_blank())
ggmatrix(plot_list, 3, 3, labels, labels, legend = grab_legend(legend), xlab = "log(FC)") +
theme_Publication(base_family = "Helvetica") +
theme(panel.grid.major = element_blank(), aspect.ratio = 1)
for (i in 1:2) {
for (j in (i+1):3) {
logfc_df = data.frame(x = rep[[i]]$V1, y = rep[[j]]$V1)
logfc_df$de = "NotSig"
logfc_df$de[which(abs(rep[[i]]$V5) == 1)] = labels[i]
logfc_df$de[which(abs(rep[[j]]$V5) == 1)] = labels[j]
logfc_df$de[which(abs(rep[[i]]$V5) == 1 & abs(rep[[j]]$V5) == 1)] = "Common"
logfc_plot = ggplot(logfc_df) +
geom_point(aes(x = x, y = y, color = de), size = 0.2, alpha = 0.25) +
labs(x = labels[i], y = labels[j]) +
scale_x_continuous(breaks = c(-10, 0, 10), limits = c(-14, 14)) +
scale_y_continuous(breaks = c(-10, 0, 10), limits = c(-14, 14)) +
scale_color_manual(values = c("SBC" = colors[1],
"SBDG" = colors[2],
"Exclusive" = colors[3],
"Common" = "#e25575",
"NotSig" = "#707070"))
plot_list[[i+j*3-3]] = logfc_plot
correlation = round(cor(rep[[i]]$V1, rep[[j]]$V1), digits = 4)
text = paste0("Corr: ", correlation, "\nGenotypes in common: ", 8*i -4*j + 4)
plot_list[[i*3+j-3]] = ggally_text(text) +
theme_grey() + theme(aspect.ratio = 1)
}
}
DEGs_factor = factor(c("SBC", "SBDG", "Exclusive", "Common", "NotSig"),
levels = c("SBC", "SBDG", "Exclusive", "Common", "NotSig"))
legend = ggplot(data.frame(x = 1:5, y = 1:5, DEGs = DEGs_factor)) +
geom_bar(aes(x = x, y = y, fill = DEGs), stat = "identity") +
scale_fill_manual(values = c("SBC" = colors[1],
"SBDG" = colors[2],
"Exclusive" = colors[3],
"Common" = "#e25575",
"NotSig" = "#707070")) +
theme_Publication(base_family = "Helvetica")
ggmatrix(plot_list, 3, 3, labels, labels, legend = grab_legend(legend), xlab = "log(FC)") +
theme_Publication(base_family = "Helvetica") +
theme(panel.grid.major = element_blank())
plot_list = list()
for (i in 1:3) {
hist_plot = hist(rep[[i]]$V1[which(abs(rep[[i]]$V5) == 1)], breaks = 20, plot = FALSE)
hist_df = data.frame(x = hist_plot$mids, y = hist_plot$counts, de = "DEGs")
hist_plot = hist(rep[[i]]$V1[which(rep[[i]]$V5 == 0)], breaks = hist_plot$breaks, plot = FALSE)
hist_df = rbind(hist_df, data.frame(x = hist_plot$mids, y = hist_plot$counts, de = "NotSig"))
hist_plot = ggplot(hist_df) +
geom_bar(aes(x = x, y = y, fill = de), stat = "identity") +
scale_fill_manual(values = c(colors[i], "#707070")) +
scale_x_continuous(breaks = c(-10, 0, 10), limits = c(-14, 14)) +
scale_y_continuous(limits = c(0, 14000)) +
theme(aspect.ratio = 1)
plot_list[[i*4-3]] = hist_plot
}
for (i in 1:2) {
for (j in (i+1):3) {
logfc_df = data.frame(x = rep[[i]]$V1, y = rep[[j]]$V1)
logfc_df$de = "NotSig"
logfc_df$de[which(abs(rep[[i]]$V5) == 1)] = labels[i]
logfc_df$de[which(abs(rep[[j]]$V5) == 1)] = labels[j]
logfc_df$de[which(abs(rep[[i]]$V5) == 1 & abs(rep[[j]]$V5) == 1)] = "Common"
logfc_plot = ggplot(logfc_df) +
geom_point(aes(x = x, y = y, color = de), size = 0.2, alpha = 0.25) +
labs(x = labels[i], y = labels[j]) +
scale_x_continuous(breaks = c(-10, 0, 10), limits = c(-14, 14)) +
scale_y_continuous(breaks = c(-10, 0, 10), limits = c(-14, 14)) +
scale_color_manual(values = c("SBC" = colors[1],
"SBDG" = colors[2],
"Exclusive" = colors[3],
"Common" = "#e25575",
"NotSig" = "#707070"))
plot_list[[i+j*3-3]] = logfc_plot
correlation = round(cor(rep[[i]]$V1, rep[[j]]$V1), digits = 4)
text = paste0("Corr: ", correlation, "\nGenotypes in common: ", 8*i -4*j + 4)
plot_list[[i*3+j-3]] = ggally_text(text) +
theme_grey() + theme(aspect.ratio = 1)
}
}
DEGs_factor = factor(c("SBC", "SBDG", "Exclusive", "Common", "NotSig"),
levels = c("SBC", "SBDG", "Exclusive", "Common", "NotSig"))
legend = ggplot(data.frame(x = 1:5, y = 1:5, DEGs = DEGs_factor)) +
geom_bar(aes(x = x, y = y, fill = DEGs), stat = "identity") +
scale_fill_manual(values = c("SBC" = colors[1],
"SBDG" = colors[2],
"Exclusive" = colors[3],
"Common" = "#e25575",
"NotSig" = "#707070")) +
theme_Publication(base_family = "Helvetica")
ggmatrix(plot_list, 3, 3, labels, labels, legend = grab_legend(legend), xlab = "log(FC)") +
theme_Publication(base_family = "Helvetica") +
theme(panel.grid.major = element_blank())
ggsave("cor.eps", width = 7, height = 7.5)
ggsave("cor.eps", width = 7, height = 7.5, device = cairo_ps)
